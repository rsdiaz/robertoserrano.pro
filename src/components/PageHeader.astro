<header>
  <div class="my-28">
    <a
        href="/blog"
        class="flex items-center text-sm mb-12 dark:hover:text-pink-600 hover:text-pink-600 group"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20px"
          height="20px"
          viewBox="0 0 512 512"
          ><title>ionicons-v5-a</title><polyline
            points="328 112 184 256 328 400"
            style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:48px"
            class="stroke-black dark:stroke-white group-hover:stroke-pink-600"
          ></polyline></svg
        >
        <span>Atras</span>
    </a>
    <div class="flex flex-col md:flex-row items-start gap-12">
      <div
        class="rounded-3xl overflow-hidden max-w-[200px] min-w-[200px]"
      >
        <img src="https://res.cloudinary.com/rserrano/image/upload/ar_1:1,b_rgb:262c35,c_fill,e_bgremoval,g_auto,r_max,w_400/v1611340481/blog/IMG_0206_ezq1zj.jpg" class="rounded-md" />
      </div>
      <div>
        <div class="flex items-center gap-4">
          <a
            class="uppercase font-bold text-blue-600 text-xs !no-underline"
            href=""
          >
            <span
              class="text-xs inline-flex items-center font-bold leading-sm px-2 rounded-full bg-white text-gray-700 border"
              >Sobre mi</span
            >
          </a>
        </div>
        <h1 class="text-5xl font-black mb-16 mt-4">Hola!🖐️ soy <span
          class="animate-text bg-gradient-to-r from-pink-500 via-yellow-200 to-pink-500 bg-clip-text text-transparent text-5xl"
          >Roberto Serrano</span
        ></h1>
        <p class="text-2xl text-gray-400 mb-4">
          Apasionado por el desarrollo web y la seguridad informática, actualmente desempeño el rol de Tech Lead en una destacada empresa del sector automotriz en España. 
        </p>
        <p class="text-2xl text-gray-400">
          Comprometido con el aprendizaje continuo, me esfuerzo por mantenerme a la vanguardia en este dinámico mundo de la tecnología.
        </p>
      </div>
    </div>
  </div>
</header>
<hr class="border-black/50 dark:border-pink-500 -mx-4 my-12" />

<script>
  // ——————————————————————————————————————————————————
  // TextScramble
  // ——————————————————————————————————————————————————

  class TextScramble {
    private el: Partial<HTMLElement>;
    private chars: string;
    private resolve!: () => void;
    private queue!: {
      from: string;
      to: string;
      start: number;
      end: number;
      char?: string;
    }[];
    private frameRequest!: number;
    private frame!: number;

    constructor(el: Element) {
      this.el = el;
      this.chars = "!<>-_\\/[]{}—=+*^?#________";
      this.update = this.update.bind(this);
    }

    setText(newText: string): Promise<void> {
      const oldText = this.el.innerText || "";
      const length = oldText ? Math.max(oldText.length, newText.length) : 0;
      const promise = new Promise<void>((resolve) => (this.resolve = resolve));
      this.queue = [];

      for (let i = 0; i < length; i++) {
        const from = oldText[i] || "";
        const to = newText[i] || "";
        const start = Math.floor(Math.random() * 40);
        const end = start + Math.floor(Math.random() * 40);
        this.queue.push({ from, to, start, end });
      }

      cancelAnimationFrame(this.frameRequest);
      this.frame = 0;
      this.update();
      return promise;
    }

    private update() {
      let output = "";
      let complete = 0;

      for (let i = 0, n = this.queue.length; i < n; i++) {
        let { from, to, start, end, char } = this.queue[i];

        if (this.frame >= end) {
          complete++;
          output += to;
        } else if (this.frame >= start) {
          if (!char || Math.random() < 0.28) {
            char = this.randomChar();
            this.queue[i].char = char;
          }
          output += `<span class="dud">${char}</span>`;
        } else {
          output += from;
        }
      }

      this.el.innerHTML = output;

      if (complete === this.queue.length) {
        this.resolve();
      } else {
        this.frameRequest = requestAnimationFrame(this.update);
        this.frame++;
      }
    }

    private randomChar(): string {
      return this.chars[Math.floor(Math.random() * this.chars.length)];
    }
  }

  // ——————————————————————————————————————————————————
  // Example
  // ——————————————————————————————————————————————————

  const phrases = [
    "Software Engineer",
    "Full Stack Web Developer",
    "JavaScript Arquitect",
    "Open Source Contributor ❤️",
    "wellcome",
    "to my website",
  ];

  const el = document.querySelector(".text");
  const fx = new TextScramble(el as Element);

  let counter = 0;
  const next = () => {
    fx.setText(phrases[counter]).then(() => {
      setTimeout(next, 800);
    });
    counter = (counter + 1) % phrases.length;
  };

  next();
</script>
